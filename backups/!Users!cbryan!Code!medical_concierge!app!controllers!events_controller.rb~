class EventsController < ApplicationController
  
  def index
    @current_tab = "tab4"
    @date = Time.parse("#{params[:start_date]} || Time.now.utc")
    load_calendars(@date)
    @view = CALENDAR

    # Valid panes are monthly, agenda, and report.
    @pane = params[:pane] || "monthly"
    @url_settings = { :pane => @pane, :date => @date }
    @subform = "/events/#{@pane}"
    
    respond_to do |format|
      format.html #index.html.erb
      format.xml  { render :xml => @task }
    end
    
  end

  def show
    @task = Task.find(params[:id])

    respond_to do |format|
      format.html # show.html.erb
      format.xml  { render :xml => @task }
    end
  end

   def detail
    @task = Task.find(params[:id])
    render :text=> @task.description.to_s

  end

   def new
    @task = Task.new
    @task.folder_id = params[:parent_id]
    @task.taskType = EVENT
    @task.created_for = session['client'].id
    @task.created_by = session['user'].id
    @task.folder_id = session['client'].current_folder
    
    if (!params[:day].nil?)
      day = params[:day]
      month = params[:month]
      year = params[:year]
      hour = 8
      if (!params[:hour].nil?)
        hour = params[:hour].to_i
      end
      d1 = DateTime.new(year.to_i,month.to_i,day.to_i, hour, m=00)
    else
      d1 = DateTime.now()
    end

    @task.starts_at = d1.strftime("%m/%d/%Y %I:%M")
    @task.ends_at = (d1.to_time + 1.hour).to_datetime.strftime("%m/%d/%Y %I:%M")
    
     respond_to do |format|
      format.html {render :layout => false } # new.html.erb
      format.xml  { render :xml => @task }
      format.iphone  # action.iphone.erb
    end

  end

  def edit
    @task = Task.find(params[:id])
    session['sub_view'] = '/events/activity'

    render :partial=> 'form_edit'
    
  end


  def create
    @task = Task.new(params[:task])

    @schedule_me = "no"
    if (!params['schedule'].nil?)
      if (!params['schedule']['me'].nil?)
        @schedule_me = params['schedule']['me']
      end
    end

    if (@schedule_me == "yes")
       @task_me = Task.new(params[:task])
       @task_me.client_id = @task.created_for
       @task_me.created_for = session['user'].id
       @task_me.save
    end

    respond_to do |format|
      if @task.save
        flash[:notice] = 'Event was successfully created.'
        format.html { redirect_to :controller=>'folders', :action=>"edit", :id=>@task.folder_id, :view=>'edit_task',:contentID=>@task.id }
        format.xml  { render :xml => @task, :status => :created, :location => @task }
      else
        format.html { render :action => "new" }
        format.xml  { render :xml => @task.errors, :status => :unprocessable_entity }
      end
    end
  end


  def update
    @task = Task.find(params[:id])

    respond_to do |format|
      if @task.update_attributes(params[:task])
        flash[:notice] = 'Event was successfully updated.'
        format.html { redirect_to :controller=>'folders', :action=>"edit", :id=>@task.folder_id, :view=>'edit_task',:contentID=>@task.id }
        format.xml  { head :ok }
      else
        format.html { render :action => "edit" }
        format.xml  { render :xml => @task.errors, :status => :unprocessable_entity }
      end
    end
  end

  def destroy
    @task = Task.find(params[:id])
    @folder_id = @task.folder_id
    @task.destroy

    respond_to do |format|
        format.html { redirect_to :controller=>'folders', :action=>"edit", :id=>@folder_id }
      format.xml  { head :ok }
    end
  end

  def complete
    ret_str = ""
    @task = Task.find(params[:id])
    if(@task.cpt)
      @task.cptOnDate = nil
      ret_str = BOX
    else
      @task.cptOnDate = Time.now.to_date
      ret_str = BOX_CHECKED
    end
    
    @task.save

    render :text=>ret_str

  end

  def tabs
    @date = Time.parse("#{params[:start_date]} || Time.now.utc")
    load_calendars(@date)

    sub_view = params['sub_view']

    if (sub_view.to_s == 'CANCEL')
      session['sub_view'] = '/events/activity'
      sub_view = '/events/activity'
    end

    
    render :partial=>sub_view
 
  end

  def activity

   @task_id= params[:task][:id]

   if (@task_id.to_s.length > 0)
     @task = Task.find(@task_id)
     @task.update_attributes(params[:task])
   else
    @task = Task.new(params[:task])
    @task.taskType = EVENT

    
    if (params[:period])
      if !(params[:period].to_s == "0")
          period = params[:period].split('_')
          if (period[0].to_s == 'days')
             @task.starts_at = Time.now.advance(:days => period[1].to_i).to_date
          elsif (period[0].to_s == 'weeks')
            @task.starts_at = Time.now.advance(:weeks => period[1].to_i).to_date
          elsif (period[0].to_s == 'months')
            @task.starts_at = Time.now.advance(:months => period[1].to_i).to_date
          end
      end
    end

    @task.client_id = session['client'].id
    @task.created_for = session['user'].id

    @task.created_by = session['user'].id
    @task.folder_id = session['user'].current_folder
    @task.save

  end

    # create recurring events
     if (params[:repeat])
      if !(params[:repeat].to_s == "0")
        period = params[:repeat].split('_')

        if (params[:until])
          if (params[:until].to_s.length > 1)
           repeat_to = params[:until]

           periods = periods_elapsed(Date.today, Date.parse(repeat_to), period[0])
           puts "#{period[0].to_s} elapsed: #{periods.to_s}"
           clone_events(periods, period[0], @task)

          end
        end

      end
     end


   render :partial=> '/events/activity'
   
  end




  def periods_elapsed(date_now, date_then, period)

    will_pass = (date_now - date_then).to_i

    days = (will_pass/-1).to_s
    weeks = ((will_pass / 7)/-1).to_s

    months_passed = (date_now.year*12+date_now.month) - (date_then.year*12+date_then.month)
    months = (months_passed/-1).to_s

    ret_str =""
    if period == 'days'
      ret_str = days
    elsif period == 'weeks'
      ret_str = weeks
    elsif period == 'months'
      ret_str = months
    end

    return ret_str

  end

  def clone_events(no_periods, period, event)
    
      for k in 1..no_periods.to_i
          new_event = event.clone
          if (period == 'weeks')
            new_event.starts_at = Time.now.advance(:weeks => k).to_date
          elsif (period == 'months')
            new_event.starts_at = Time.now.advance(:months => k).to_date
          end
          new_event.save
       end
  

  end



  def quick_delete
    id = params['id']
    Task.destroy(id)
    @activities =  Task.find(:all, :conditions=>['client_id = ? and taskType = ?', session['client'].id, EVENT ], :order=>'starts_at desc')

   render :partial=> '/events/activity'
  end

  def change_date
    task_id = params['task_id']
    newdate = params['newdate']
    @task = Task.find(task_id)
    @task.starts_at = newdate
    @task.save

    render :text=>"&nbsp;"
    
  end

  def load_calendars(date)
    
    @year = date.year
    @month = date.month
    @start_date = Date.new(date.year, date.month, date.day)
    @start_month = Date.new(date.year, date.month, 1)
    @currentUserId = session['user'].id
    @events_week, period_text = Task.get_events_for_period(@currentUserId, @start_date, "week")
    @events_month, period_text = Task.get_events_for_period(@currentUserId, @start_month, "month")

  end


end
